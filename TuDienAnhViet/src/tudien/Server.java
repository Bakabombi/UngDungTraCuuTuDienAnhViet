package tudien;

import java.io.*;
import java.net.*;

public class Server {
    public static final int PORT = 1234;

    public static void main(String[] args) {
        try (ServerSocket serverSocket = new ServerSocket(PORT)) {
            System.out.println("Server ƒëang ch·∫°y tr√™n port " + PORT);
            while (true) {
                Socket clientSocket = serverSocket.accept();
                System.out.println("Client k·∫øt n·ªëi: " + clientSocket.getInetAddress().getHostAddress());
                new Thread(() -> handleClient(clientSocket)).start();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void handleClient(Socket socket) {
        try (
            ObjectOutputStream out = new ObjectOutputStream(socket.getOutputStream());
            ObjectInputStream in = new ObjectInputStream(socket.getInputStream())
        ) {
            Message request;
            while ((request = (Message) in.readObject()) != null) {
                System.out.println("Nh·∫≠n t·ª´ client: " + request.type + " | " + request.word);
                Message response;

                switch (request.type) {
                    case "LOGIN":
                        String role = DatabaseHelper.checkLogin(request.word, request.meaning);
                        response = new Message(
                                role != null ? "LOGIN_OK" : "LOGIN_FAIL",
                                request.word,
                                role != null ? role : "Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u!"
                        );
                        break;

                    case "REGISTER":
                        boolean registered = DatabaseHelper.registerUser(request.word, request.meaning);
                        response = new Message(
                                registered ? "REGISTER_OK" : "REGISTER_FAIL",
                                request.word,
                                registered ? "ƒêƒÉng k√Ω th√†nh c√¥ng!" : "T√™n ng∆∞·ªùi d√πng ƒë√£ t·ªìn t·∫°i!"
                        );
                        break;

                    case "TRA":
                        String traMode = (request.meaning == null || request.meaning.isEmpty()) ? "EV" : request.meaning;
                        String traResult = DatabaseHelper.lookupWord(request.word, traMode);
                        response = new Message("RESULT", request.word, traResult);
                        break;

                    case "ADD":
                        // request.meaning ch·ª©a nghƒ©a, request.word ch·ª©a t·ª´
                        boolean added = DatabaseHelper.addWord(
                                request.word,
                                request.meaning,
                                "" // definition hi·ªán ch∆∞a d√πng
                        );
                        response = new Message(
                                "RESULT",
                                request.word,
                                added ? "‚úÖ ƒê√£ th√™m t·ª´ th√†nh c√¥ng!\n" + request.word + " ‚Üí " + request.meaning
                                      : "‚ö† Kh√¥ng th·ªÉ th√™m t·ª´ (c√≥ th·ªÉ ƒë√£ t·ªìn t·∫°i)."
                        );
                        break;

                    case "EDIT":
                        // request.meaning ch·ª©a nghƒ©a m·ªõi, request.word ch·ª©a t·ª´
                        boolean edited = DatabaseHelper.editWord(
                                request.word,
                                request.meaning,
                                "",   // definition m·ªõi
                                "EV"  // m·∫∑c ƒë·ªãnh EV, Client s·∫Ω g·ª≠i ƒë√∫ng mode n·∫øu c·∫ßn m·ªü r·ªông
                        );
                        response = new Message(
                                "RESULT",
                                request.word,
                                edited ? "‚úèÔ∏è ƒê√£ ch·ªânh s·ª≠a th√†nh c√¥ng!\n" + request.word + " ‚Üí " + request.meaning
                                       : "‚ö† Kh√¥ng t√¨m th·∫•y t·ª´ ƒë·ªÉ ch·ªânh s·ª≠a!"
                        );
                        break;

                    case "DELETE":
                        boolean deleted = DatabaseHelper.deleteWord(request.word, "EV"); // m·∫∑c ƒë·ªãnh EV
                        response = new Message(
                                "RESULT",
                                request.word,
                                deleted ? "üóëÔ∏è ƒê√£ xo√° th√†nh c√¥ng t·ª´: " + request.word
                                        : "‚ö† Kh√¥ng t√¨m th·∫•y t·ª´ ƒë·ªÉ xo√°!"
                        );
                        break;

                    case "EXIT":
                        System.out.println("Client tho√°t k·∫øt n·ªëi.");
                        return;

                    default:
                        response = new Message("RESULT", request.word, "‚ö† Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá!");
                        break;
                }

                out.writeObject(response);
                out.flush();
                System.out.println("G·ª≠i ph·∫£n h·ªìi: " + response.type + " | " + response.word + " ‚Üí " + response.meaning);
            }
        } catch (Exception e) {
            System.out.println("Client ng·∫Øt k·∫øt n·ªëi.");
        }
    }
}
